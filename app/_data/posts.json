{
  "getting-started-building-in-public-on-x-and-bluesky-my-experience-as-a-new-user": {
    "title": "Getting Started Building in Public on X and Bluesky: My experience as a new user",
    "link": "https://medium.com/@johnnybuilds/getting-started-building-in-public-on-x-and-bluesky-my-experience-as-a-new-user-4762f4bb68dd?source=rss-36160084676d------2",
    "pubDate": "Thu, 21 Nov 2024 02:34:43 GMT",
    "content": "<p>I recently made a new websit for side projects and made new socials, including ones for <a href=\"https://x.com/home\">X/Twitter</a> and <a href=\"https://bsky.app/\">Bluesky</a>. I decided to write up my experiences on each.</p><h3>Onboarding</h3><p>Both platforms require the usual “I’m not a robot” verifications, which is fine, but one key difference stood out: choosing a handle.</p><p>For BlueSky, it was seamless and easy. I got my johnnybuilds handle no problem. On X, it was another story.</p><p>Of course, X has way more users and attracts more bots and spammers, and therefore has far fewer good usernames available, so they have to do things differently. Fine, I guess. So they give you a crap username automatically first, something like BuildsJohn6419. Then after you made the account and passed their security measures, you can pick a handle you actually like.</p><p>So surprisingly, JohnnyBuilds was available as a handle. I clicked it. Then it said it wasn’t available, even though it showed up in their own list of suggestions for me to select.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*k7-aMORVAEx03WuD0gsnqQ.png\" /><figcaption>@JohnnyBuilds is offered as a suggestion</figcaption></figure><p>I tried picking it again, but then is said I couldn’t because I was rate limited. Tried picking a less good name, but was still rate limited.</p><p>After waiting 48 hours, I was finally allowed to try again, so I did. Same thing happened of course.</p><p>After another 48 hours, I decided to try to sign up as @johnnybuilds_ and that finally went through.</p><h3>Users</h3><p>I’ll skip comparing all the other nuances of setting up a profile, choosing interests and yada yada. Both X and Bluesky are fine. What about users? Everyone knows X (or at least Twitter). What about Bluesky?</p><p>I’d heard that a lot of the dev community were creating accounts over there and usage was up. Let’s find out!</p><p>I followed a bunch of people on X first, then used the <a href=\"https://chromewebstore.google.com/detail/sky-follower-bridge/behhbpbpmailcnfbjagknjngnfdojpko?hl=en\">Sky Follower Bridge</a> by <a href=\"https://github.com/kawamataryo/sky-follower-bridge\">Kawamata Ryo</a> to find those same people on Bluesky and follow them. Of the 20 people I follow on X, exactly 50% of them were on Bluesky which was actually higher than I expected.</p><h3>Connecting</h3><p>What about the The thing that matters most in a social platform? You know, actually connecting with real people! People who by the way hopefully aren’t jerks and share some of your same interests.</p><p>On X, there are more people and therefore more posts, but there was also a lot of noise and self-promotion. The follows I got were mostly bots. My posts seemingly went nowhere, mostly getting single digit views after a number of different tries (hashtag vs no hashtag, no urls, with pic, with video, with thread).</p><p>Basically, I felt like I was talking to myself or perhaps even just bothering people with my own bs that was of interest to no one. I did start to notice that even people with large follower counts complained about the “algo” changes that caused their reach to go down, and having to continually change their posting tactics based on trial and error.</p><p>On the other hand, Bluesky was a different story. There’s a whole fun vibe going on over there now as its usage is currently skyrocketing. People seem genuinely excited to connect and even though my follower count was miniscule, a lot of other people were in the same boat. I felt like I could just post whatever I wanted and not worry about it so much.</p><p>I’ve been tracking my follower count growth on both platforms, and despite trying much harder on X, my Bluesky follower count is double.</p><figure><img alt=\"Chart showing growth of followers on X and Bluesky. 161 on Bluesky. 59 on X.\" src=\"https://cdn-images-1.medium.com/max/1024/1*yysux3kVE9MyFPSodJSHvA.png\" /></figure><h3>Content</h3><p>I’m mainly interested in #buildinpublic. I don’t need to see a bunch of political posts, pictures of people eating or partying and whatnot.</p><p>The posts I see under the following tab for X and Bluesky are roughly equivalent. In fact the designs are so similar, it is easy to forget which app you’re on. One difference is that on Bluesky at the moment, a lot of people are joining so you see a lot of ‘starter packs’ — user-made lists of recommendations of people to follow — which is cool.</p><p>When you switch to the Discover or For You tab, that’s where the real differences are. To put it bluntly, the For You tab on X is a complete shitshow. I’m only following devs and tech accounts, and my topics and interests are set to web development and tech news, yet this tab is full of Elon Musk and a bunch of political junk. Maybe this gets better after the election, but still, gimmeabreak!</p><p>On Bluesky, the Discover tab is actually showing me good stuff. I actually started following quite a few of the accounts that were presented.</p><p><em>Note: I went back to X, muted Elon Musk and the For You tab was actually about as good as Bluesky Discover 🤣</em></p><h3>Conclusion</h3><p>When it comes to comparing X and Bluesky in the context of #buildinpublic, there are definitely more prominent folks on X. So if you’re looking to follow the big names and see the big trends, you’ll want to be on there.</p><p>However, if you want more of a feeling of community and are in the early stages of building in public, Bluesky is definitely a more fun experience compared to X which feels more like you are forced into doing engagement farming to even get noticed.</p><p>Going forward, I’m going to be spending more time on Bluesky. It does really seem like a good moment in time to grow with the platform. I do plan to stay on X though, as there is still a lot of interesting content on there, but I’ll be sticking to mostly reading and replying in threads rather than posting.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4762f4bb68dd\" width=\"1\" height=\"1\" alt=\"\">"
  },
  "daily-git-summaries-for-build-logs": {
    "title": "Daily Git Summaries for Build Logs",
    "link": "https://medium.com/@johnnybuilds/daily-git-summaries-for-build-logs-e9a1d22c638b?source=rss-36160084676d------2",
    "pubDate": "Fri, 08 Nov 2024 14:28:13 GMT",
    "content": "<p>As part of my standard approach to #buildinpublic, every project I do has a build log usually in the README.md file in the git repository. I like to document and share what I do every day on my active projects. I’ve arrived at this format where there’s a line item for each change with emojis serving as fun bullet points:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/1*36tTyu2kc18J2bycDXKrCQ.png\" /><figcaption>Example build log</figcaption></figure><p>A recent addition to this practice is putting a one-line summary of the code changes.</p><p>It is a concise record of daily progress, tracking files changed, lines added, and lines deleted in one place. It’s a useful snapshot for both myself and anyone following along to see the daily pace and types of changes being made.</p><p>Here’s an entry from the build log in my <a href=\"https://publicbuilders.org\">publicbuilders.org</a> project:</p><p><strong>2024–11–05</strong><br>🛠️ Grinding on creating initial list of builders<br>👤 Improved CLI command to batch upload missing profile images to S3<br>🔍 Added sorting and searching<br>⏫ 2024–11–05 — Files changed: 11, Lines added: 1197, Lines deleted: 390</p><p>That last line is generated from this CLI command:</p><pre>git log --since=&quot;1 month ago&quot; --date=short --pretty=format:&quot;%cd&quot; --shortstat | \\<br>awk &#39;<br>    /^20[0-9]{2}-[0-9]{2}-[0-9]{2}/ { <br>        date=$1 <br>    } <br>    /files changed/ { <br>        files[date]+=$1; inserted[date]+=$4; deleted[date]+=$6 <br>    } <br>    END { <br>        for (d in files) <br>            printf &quot;%s - Files changed: %s, Lines added: %s, Lines deleted: %s\\n&quot;, d, files[d], inserted[d], deleted[d] <br>    }<br>&#39; | sort</pre><p>This command generates a rollup of changes per day, summarizing each day’s commit activity across three key metrics: number of files changed, lines added, and lines deleted. It outputs something like this:</p><pre>2024-11-03 - Files changed: 86, Lines added: 12129, Lines deleted: 697<br>2024-11-04 - Files changed: 12, Lines added: 2498, Lines deleted: 269</pre><p>You can also find the command on <a href=\"https://gist.github.com/johnnybuildsyo/16a77a2f20970cc054a07b53b7f900f1\">this public gist</a>.</p><p>I’ve thought about making a CLI that would use AI to analyze the commits and generate the summary itself as well. I thought it likely that someone had already done this, and I found <a href=\"https://autochangelog.dev\">autochangelog.dev</a> but it doesn’t seem to be working at the moment.</p><p>I could build it myself, something like what Nutlope made with <a href=\"https://github.com/Nutlope/aicommits\">aicommits</a>, but I’m already busy on other stuff… So I just added it as another line item in the <a href=\"https://johnnybuilds.com\">my idea pile</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e9a1d22c638b\" width=\"1\" height=\"1\" alt=\"\">"
  },
  "how-johnny-built-johnnybuildscom": {
    "title": "How Johnny Built JohnnyBuilds.com",
    "link": "https://medium.com/@johnnybuilds/how-johnny-built-johnnybuilds-com-7cbea268e8fe?source=rss-36160084676d------2",
    "pubDate": "Sat, 02 Nov 2024 16:38:33 GMT",
    "content": "<p>It starts with the domain of course. 🙃</p><p>Somehow <a href=\"https://johnnybuilds.com\">johnnybuilds.com</a> was available, so I scooped it up.</p><p>I’ve already written about <a href=\"https://medium.com/@johnnybuilds/how-johnny-builds-new-web-projects-51f32b39bc20\">how I get started on new web projects</a>, so check that out for the initial steps. Essentially, it begins from a <a href=\"https://nextjs.org/docs/app/api-reference/cli/create-next-app\">default Next.js site</a> via npx create-next-app@latest. My new favorite go-to font is <a href=\"https://fonts.google.com/specimen/Rethink+Sans\">Rethink Sans</a> optimized with <a href=\"https://nextjs.org/docs/app/api-reference/components/font\">next/font</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*c14lfPxeEg8zMTSgS3XIhA.gif\" /><figcaption>Screen grab of <a href=\"https://johnnybuilds.com\">johnnybuilds.com</a></figcaption></figure><p>The <a href=\"https://github.com/johnnybuildsyo/johnnybuilds.com\">source code is up on Github</a> if you want to take a look. Otherwise keep reading for the details.</p><h4>Glitchy Text</h4><p>For fun I made some animated glitchy text where after 4 seconds it starts to switch the text randomly to nonsense phrases like “Buildinc wib ztuzz in pubyub” and “Blizdang yeb stank in publiz”. I used a monotype font so there wouldn’t be any layout shift as the letters change.</p><p>Here’s the code if you want to do something similar:</p><pre>&quot;use client&quot;<br>import React, { useState, useEffect, useMemo } from &quot;react&quot;<br><br>const GlitchySubhead = () =&gt; {<br>  const words = useMemo(<br>    () =&gt; [<br>      {<br>        original: &quot;Building&quot;,<br>        substitutions: [&quot;Buylding&quot;, &quot;Buildinc&quot;, &quot;Blizdang&quot;],<br>      },<br>      ...<br>    ],<br>    []<br>  )<br><br>  const [currentIndices, setCurrentIndices] = useState(words.map(() =&gt; -1))<br><br>  useEffect(() =&gt; {<br>    let isMounted = true<br>    const cycleDuration = 20000<br>    const minDelay = 400<br>    const maxDelay = 4000<br>    const startTime = Date.now()<br><br>    const updateWord = () =&gt; {<br>      if (!isMounted) return<br><br>      const elapsedTime = Date.now() - startTime<br><br>      // Display the original text for 4 seconds<br>      if (elapsedTime &lt; 4000) {<br>        setTimeout(updateWord, 200)<br>        return<br>      }<br><br>      const t = elapsedTime % cycleDuration<br>      const delay = minDelay + (maxDelay - minDelay) * Math.abs(Math.cos((Math.PI * t) / cycleDuration))<br>      const wordIndex = Math.floor(Math.random() * words.length)<br>      const word = words[wordIndex]<br>      if (word.substitutions.length &gt; 0) {<br>        setCurrentIndices((prevIndices) =&gt; {<br>          const newIndices = [...prevIndices]<br>          if (newIndices[wordIndex] === -1) {<br>            newIndices[wordIndex] = 0<br>          } else {<br>            if (newIndices[wordIndex] &lt; word.substitutions.length - 1) {<br>              newIndices[wordIndex]++<br>            } else {<br>              newIndices[wordIndex] = -1<br>            }<br>          }<br>          return newIndices<br>        })<br>      }<br>      setTimeout(updateWord, delay)<br>    }<br>    updateWord()<br><br>    return () =&gt; {<br>      isMounted = false<br>    }<br>  }, [words])<br><br>  const currentWords = words.map((word, index) =&gt; {<br>    const substitutionIndex = currentIndices[index]<br>    return substitutionIndex === -1 ? word.original : word.substitutions[substitutionIndex]<br>  })<br><br>  return &lt;h2 className=&quot;text-xl opacity-70 text-center font-mono&quot;&gt;{currentWords.join(&quot; &quot;)}&lt;/h2&gt;<br>}<br><br>export default GlitchySubhead</pre><h4>Make a Request Form</h4><p>Your basic contact form. We could set up a database to collect stuff or plug in some fancy third party bla bla. Forget that. Quick setup by connecting to <a href=\"https://resend.com/\">Resend</a> (great DX!) with a Server Action.</p><pre>import { Resend } from &#39;resend&#39;;<br><br>export async function sendRequest({title, description, contact}: {title: string, description: string, contact: string}) {<br>  &#39;use server&#39;;<br><br>  const resend = new Resend(process.env.RESEND_API_KEY);<br>  const { data } = await resend.emails.send({<br>    from: &#39;Build Requests &lt;requests@johnnybuilds.com&gt;&#39;,<br>    to: [process.env.EMAIL_JOHNNY],<br>    subject: &#39;New Johnny Builds Request&#39;,<br>    html: `&lt;h1&gt;${title}&lt;br/&gt;&lt;br/&gt;&lt;/h1&gt;&lt;div&gt;${description}&lt;br/&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Contact:&lt;br/&gt;${contact}&lt;/div&gt;`<br>  });<br>}</pre><p>Also set up a <a href=\"http://www.google.com/recaptcha/admin\">Google ReCaptcha key</a> for the site then whipped up a server action for that as well so I don’t get slammed with emails.</p><pre>export async function verifyCaptcha(captchaToken: string) {<br>  &quot;use server&quot;;<br><br>  const RECAPTCHA_SECRET_KEY = process.env.RECAPTCHA_SECRET_KEY;<br><br>  const response = await fetch(`https://www.google.com/recaptcha/api/siteverify`, {<br>    method: &quot;POST&quot;,<br>    headers: {<br>      &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,<br>    },<br>    body: `secret=${RECAPTCHA_SECRET_KEY}&amp;response=${captchaToken}`,<br>  });<br><br>  const captchaValidation = await response.json();<br>  if (captchaValidation.success) {<br>    return true;<br>  } else {<br>    throw new Error(&quot;reCAPTCHA validation failed&quot;);<br>  }<br>}</pre><p>Here’s the code for the form that uses a <a href=\"https://github.com/dozoisch/react-google-recaptcha\">React reCAPTCHA component</a>:</p><pre>&quot;use client&quot;<br><br>import { useTransition, useState } from &quot;react&quot;<br>import ReCAPTCHA from &quot;react-google-recaptcha&quot;<br>import { Input } from &quot;@/components/ui/input&quot;<br>import { Label } from &quot;@/components/ui/label&quot;<br>import { Button } from &quot;@/components/ui/button&quot;<br>import { Textarea } from &quot;@/components/ui/textarea&quot;<br>import Link from &quot;next/link&quot;<br><br>export default function RequestForm({ handleSubmit }: { handleSubmit: (data: FormData) =&gt; void }) {<br>  const [title, setTitle] = useState(&quot;&quot;)<br>  const [description, setDescription] = useState(&quot;&quot;)<br>  const [contact, setContact] = useState(&quot;&quot;)<br>  const [captchaToken, setCaptchaToken] = useState&lt;string | null&gt;(null)<br>  const [isPending, startTransition] = useTransition()<br><br>  const onSubmit = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {<br>    e.preventDefault()<br><br>    if (!captchaToken) {<br>      alert(&quot;Complete the CAPTCHA you fool!&quot;)<br>      return<br>    }<br><br>    const formData = new FormData()<br>    formData.append(&quot;title&quot;, title)<br>    formData.append(&quot;description&quot;, description)<br>    formData.append(&quot;contact&quot;, contact)<br>    formData.append(&quot;captchaToken&quot;, captchaToken)<br><br>    startTransition(async () =&gt; {<br>      await handleSubmit(formData)<br>      setTitle(&quot;&quot;)<br>      setDescription(&quot;&quot;)<br>      setContact(&quot;&quot;)<br>      setCaptchaToken(null)<br>    })<br>  }<br><br>  return (<br>    &lt;form className=&quot;w-full max-w-xl mx-auto&quot; onSubmit={onSubmit}&gt;<br>      &lt;div className=&quot;flex flex-col gap-4 py-4 w-full items-start&quot;&gt;<br>        &lt;div className=&quot;w-full flex flex-col gap-1&quot;&gt;<br>          &lt;Label htmlFor=&quot;title&quot;&gt;Give your project a name&lt;/Label&gt;<br>          &lt;Input maxLength={30} id=&quot;title&quot; value={title} onChange={(e) =&gt; setTitle(e.target.value)} className=&quot;w-full&quot; placeholder=&quot;Keep it short &amp; catchy&quot; required /&gt;<br>        &lt;/div&gt;<br>        &lt;div className=&quot;w-full flex flex-col gap-1&quot;&gt;<br>          &lt;Label htmlFor=&quot;description&quot;&gt;Description&lt;/Label&gt;<br>          &lt;Textarea<br>            aria-label=&quot;Project description&quot;<br>            id=&quot;description&quot;<br>            value={description}<br>            onChange={(e) =&gt; setDescription(e.target.value)}<br>            className=&quot;w-full&quot;<br>            rows={8}<br>            placeholder=&quot;What would you like me to build?&quot;<br>            required<br>          /&gt;<br>        &lt;/div&gt;<br>        &lt;div className=&quot;w-full flex flex-col gap-1&quot;&gt;<br>          &lt;Label htmlFor=&quot;contact&quot;&gt;<br>            Contact &lt;span className=&quot;text-xs opacity-70 italic&quot;&gt;(will not be shared)&lt;/span&gt;<br>          &lt;/Label&gt;<br>          &lt;Textarea id=&quot;contact&quot; value={contact} onChange={(e) =&gt; setContact(e.target.value)} className=&quot;w-full&quot; rows={3} placeholder=&quot;How would you like me to contact you?&quot; required /&gt;<br>        &lt;/div&gt;<br>        &lt;div className=&quot;flex justify-end w-full&quot;&gt;<br>          &lt;div className=&quot;pt-4 col-start-2 col-span-3&quot;&gt;<br>            &lt;div className=&quot;rounded-xl overflow-hidden w-[300px] h-[74px] border border-white/20&quot;&gt;<br>              &lt;div className=&quot;relative -left-0.5 -top-0.5&quot;&gt;<br>                &lt;ReCAPTCHA sitekey={process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY || &quot;&quot;} theme=&quot;dark&quot; onChange={(value) =&gt; setCaptchaToken(value)} /&gt;<br>              &lt;/div&gt;<br>            &lt;/div&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div className=&quot;flex gap-4 justify-end pt-8 pb-2&quot;&gt;<br>        &lt;Link href=&quot;/&quot;&gt;<br>          &lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&gt;<br>            Cancel<br>          &lt;/Button&gt;<br>        &lt;/Link&gt;<br>        &lt;Button disabled={isPending || !title || !description || !contact || !captchaToken} type=&quot;submit&quot;&gt;<br>          {isPending ? &quot;Sending...&quot; : &quot;Send Request&quot;}<br>        &lt;/Button&gt;<br>      &lt;/div&gt;<br>    &lt;/form&gt;<br>  )<br>}</pre><p>And the page code that connects the form and the server action:</p><pre>import { redirect } from &quot;next/navigation&quot;<br>import RequestForm from &quot;@/components/request-form&quot;<br>import { verifyCaptcha, sendRequest } from &quot;../_actions&quot;<br><br>export default function RequestPage() {<br>  async function handleSubmit(data: FormData) {<br>    &quot;use server&quot;<br><br>    const title = data.get(&quot;title&quot;) as string<br>    const description = data.get(&quot;description&quot;) as string<br>    const contact = data.get(&quot;contact&quot;) as string<br>    const captchaToken = data.get(&quot;captchaToken&quot;) as string<br>    if (!title || !description || !contact || !captchaToken) {<br>      throw new Error(&quot;Missing fields&quot;)<br>    }<br>    await verifyCaptcha(captchaToken)<br>    await sendRequest({ title, description, contact })<br>    redirect(&quot;/request/success&quot;)<br>  }<br><br>  return (<br>    &lt;&gt;<br>      &lt;h1 className=&quot;text-7xl font-extrabold&quot;&gt;Johnny Builds&lt;/h1&gt;<br>      &lt;p className=&quot;text-xl text-center&quot;&gt;Send a project build request. If it is interesting, maybe I’ll build it.&lt;/p&gt;<br>      &lt;RequestForm handleSubmit={handleSubmit} /&gt;<br>    &lt;/&gt;<br>  )<br>}</pre><p>Ironically, Github temporarily flagged my account for spam due to my new account status when I did the integration but thankfully their support quickly reinstated me.</p><p>If I wind up getting to many contacts, I’ll probably just add Auth in to make people set up an account to email me.</p><h4>Dock</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/990/1*GQUe8tGMNLI-Ye4M3w5Ing.png\" /></figure><p>The cool thing about the <a href=\"https://github.com/birobirobiro/awesome-shadcn-ui\">awesome ecosystem</a> for <a href=\"https://ui.shadcn.com/\">shadcn/ui</a> is there are an evergrowing number of great components available to drop into your projects. In this case, I grabbed the <a href=\"https://magicui.design/docs/components/dock\">Dock component from Magic UI</a> and had this neat social media links component working in my project in minutes. <em>(Note: I did make some tweaks to my local version to make Typescript happy)</em></p><h4>Posts</h4><p>Another easy one. Just made a server action that pulls post data from my RSS feed on Medium:</p><pre>import Parser from &#39;rss-parser&#39;;<br><br>const parser = new Parser();<br><br>export async function fetchMediumPosts() {<br>  &quot;use server&quot;;<br>  const feed = await parser.parseURL(`https://medium.com/feed/@johnnybuilds`);<br>  <br>  return feed.items.map((item) =&gt; ({<br>    title: item.title,<br>    link: item.link,<br>    pubDate: item.pubDate,<br>    contentSnippet: item.contentSnippet,<br>  }));<br>}</pre><p>The plugged it into the page code:</p><pre>import { Button } from &quot;@/components/ui/button&quot;<br>import { PlusIcon } from &quot;lucide-react&quot;<br>import Link from &quot;next/link&quot;<br>import Intro from &quot;@/components/intro&quot;<br>import GlitchySubhead from &quot;@/components/glitchy-subhead&quot;<br>import { JohnnyDock } from &quot;@/components/johnny-dock&quot;<br>import { ProjectsSection } from &quot;@/components/projects-section&quot;<br>import { PostsSection } from &quot;@/components/posts-section&quot;<br>import { fetchMediumPosts } from &quot;./_actions&quot;<br>import { Post } from &quot;./_types&quot;<br><br>const posts = (await fetchMediumPosts()) as Post[]<br><br>export default function Home() {<br>  return (<br>    &lt;&gt;<br>      &lt;h1 className=&quot;text-7xl font-extrabold&quot;&gt;Johnny Builds&lt;/h1&gt;<br>      &lt;GlitchySubhead /&gt;<br>      &lt;Link href=&quot;/request&quot;&gt;<br>        &lt;Button className=&quot;flex items-center gap-2 font-display&quot;&gt;<br>          &lt;PlusIcon size={16} /&gt;<br>          Make a Request<br>        &lt;/Button&gt;<br>      &lt;/Link&gt;<br>      &lt;Intro /&gt;<br>      &lt;JohnnyDock /&gt;<br>      &lt;ProjectsSection /&gt;<br>      &lt;PostsSection posts={posts} /&gt;<br>    &lt;/&gt;<br>  )<br>}</pre><h4>Thanks for reading!</h4><p>That’s it. Now that I’ve got my site up, time to get going on my next project! Follow me on here, <a href=\"https://x.com/JohnnyBuildz\">X/Twitter</a> or <a href=\"https://bsky.app/profile/johnnybuilds.bsky.social\">Bluesky</a> to keep up with what I’m cooking. I’ll be documenting every step as I build in public.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7cbea268e8fe\" width=\"1\" height=\"1\" alt=\"\">"
  },
  "starting-from-scratch": {
    "title": "Starting from Scratch",
    "link": "https://medium.com/@johnnybuilds/starting-from-scratch-47b8fdf6fe1f?source=rss-36160084676d------2",
    "pubDate": "Thu, 31 Oct 2024 13:27:35 GMT",
    "content": "<p>I’m a web dev who’s been at it for a long time. My career has been successful. Back in the day, I was somewhat well known(-ish) with a couple moderately popular open source projects. I even gave a few conference talks. I dialed back from that as I spent years heads down at a couple different startups as they were scaling.</p><p>These days, I’ve got a great full-time gig at a company I find inspiring. I’m not looking to change that, but… I do get restless.</p><p>Lately, I’ve been compelled by a new idea for building side projects:</p><p><strong><em>What if I started over?</em></strong></p><p>Clean slate. New email. New website. New Github. New socials. New everything.</p><p>Start from scratch with a fresh identity. Build whatever catches my interest. For fun. In public.</p><p>What will I make? Will anyone be interested? Where will it lead?</p><p><strong><em>Time to find out…</em></strong></p><p>I’m going to document everything, from the very beginning. Zero projects. Zero audience.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3w_xmC3AA1yHMiYu9o7MXg.png\" /><figcaption><a href=\"https://johnnybuilds.com\">JohnnyBuilds.com</a></figcaption></figure><p>Let’s cook!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=47b8fdf6fe1f\" width=\"1\" height=\"1\" alt=\"\">"
  },
  "how-johnny-builds-new-web-projects": {
    "title": "How Johnny Builds New Web Projects",
    "link": "https://medium.com/@johnnybuilds/how-johnny-builds-new-web-projects-51f32b39bc20?source=rss-36160084676d------2",
    "pubDate": "Mon, 28 Oct 2024 02:24:01 GMT",
    "content": "<p>I start with a standard <a href=\"https://nextjs.org/docs/getting-started/installation\">Next.js Installation</a> then clear out the boilerplate stuff from page.tsx and package.json, yada yada yada. If you want to skip straight to code, I published my own flavor of Next.js Starter <a href=\"https://github.com/johnnybuildsyo/johnnybuilds-nextjs-starter\">on Github</a>.</p><p>I pnpm add some stuff:</p><pre>pnpm add eslint-config-prettier eslint-plugin-prettier prettier</pre><p>Next I set up my eslint/prettier config and VSCode settings to auto-format to my standard specs.</p><pre># .prettierignore<br>.cache<br>.next<br>package.json<br>package-lock.json<br>public<br>api/socks.js<br>node-modules<br>*.md<br>*.mdx</pre><pre>// .prettierrc<br>{<br>  &quot;endOfLine&quot;: &quot;lf&quot;,<br>  &quot;printWidth&quot;: 200,<br>  &quot;semi&quot;: false,<br>  &quot;singleQuote&quot;: false,<br>  &quot;tabWidth&quot;: 2,<br>  &quot;trailingComma&quot;: &quot;es5&quot;<br>}</pre><pre>// .vscode/settings.json<br>{<br>    &quot;editor.formatOnPaste&quot;: true,<br>    &quot;editor.formatOnSave&quot;: true,<br>    &quot;editor.codeActionsOnSave&quot;: {<br>        &quot;source.fixAll.eslint&quot;: &quot;explicit&quot;<br>    },<br>    &quot;eslint.validate&quot;: [<br>        &quot;javascript&quot;,<br>        &quot;javascriptreact&quot;,<br>        &quot;typescript&quot;,<br>        &quot;typescriptreact&quot;<br>    ]<br>}</pre><p>Now, every time I save or paste, code is auto-formatted instantly.</p><p>I also like to have this command in my package.json which makes pushing and deploying super quick by using <a href=\"https://github.com/Nutlope/aicommits\">aicommits</a> to write the commit message for me (if I don’t like it, I can cancel).</p><pre>&quot;go&quot;: &quot;git add . &amp;&amp; aicommits &amp;&amp; git push origin main&quot;,</pre><p>There’s other stuff I like to have, like a shadcn/ui components config and directory, a theme provider for light/dark mode and a better default layout than the one you get from create-next-app.</p><p>I made a <a href=\"https://johnnybuilds-nextjs-starter.vercel.app/\">JohnnyBuilds Next.js Starter</a> for my bare-bones setup to get going quickly. You can check it out <a href=\"https://github.com/johnnybuildsyo/johnnybuilds-nextjs-starter\">on Github</a>.</p><p>Beyond that, for auth I hook up <a href=\"https://clerk.com\">Clerk</a>. For email, <a href=\"https://resend.com/\">Resend</a>. Money stuff on <a href=\"https://stripe.com/\">Stripe</a>. Files on <a href=\"https://aws.amazon.com/s3/\">S3</a>. Data on <a href=\"https://supabase.com/\">Supabase</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=51f32b39bc20\" width=\"1\" height=\"1\" alt=\"\">"
  }
}